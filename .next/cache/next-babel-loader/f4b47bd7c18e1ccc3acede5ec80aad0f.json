{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\cursos\\\\ImersaoCelke\\\\web\\\\pages\\\\cadastrar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Jumbotron, Container, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nfunction cadastrar() {\n  const {\n    0: meta,\n    1: setMeta\n  } = useState({\n    name: '',\n    description: '',\n    status: ''\n  });\n  const {\n    0: response,\n    1: setResponse\n  } = useState({\n    formSave: false,\n    type: '',\n    message: ''\n  });\n\n  const onChangeInput = e => setMeta(_objectSpread(_objectSpread({}, meta), {}, {\n    [e.target.name]: e.target.value\n  }));\n\n  const sendMeta = async e => {\n    e.preventDefault();\n    setResponse({\n      formSave: true\n    });\n\n    try {\n      const res = await fetch('http://localhost:8080/metas', {\n        method: 'POST',\n        body: JSON.stringify(meta),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      const responseEnv = await res.json();\n\n      if (responseEnv.error) {\n        setResponse({\n          formSave: false,\n          type: 'error',\n          message: responseEnv.message\n        });\n      } else {\n        setResponse({\n          formSave: false,\n          type: 'success',\n          message: responseEnv.message\n        });\n      }\n    } catch (error) {\n      setResponse({\n        formSave: false,\n        type: 'error',\n        message: 'Erro: meta n√£o cadastrada com sucesso'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"style\", {\n        children: `.form{\n              background-color: #171941;\n              color: #bf38ac;\n              padding-top: 30px;\n              padding-bottom: 150px;\n              margin-bottom: 0rem !important;\n          }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"display-4 text-center\",\n          children: \"Cadastrar minha meta.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", response.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 41\n        }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", response.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 42\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: sendMeta,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Nome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            id: \"name\",\n            placeholder: \"Nome da meta\",\n            onChange: onChangeInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 16\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Descri\\xE7\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"description\",\n            id: \"description\",\n            placeholder: \"Descri\\xE7\\xE3o da meta\",\n            onChange: onChangeInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"status\",\n            id: \"status\",\n            placeholder: \"Status da meta\",\n            onChange: onChangeInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 22\n          }, this), response.formSave ? /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: true,\n            children: \"Enviando ... \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 34\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Cadastrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 90\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\nexport default cadastrar;","map":{"version":3,"sources":["D:/cursos/ImersaoCelke/web/pages/cadastrar.js"],"names":["React","useState","Jumbotron","Container","Button","Form","FormGroup","Label","Input","FormText","cadastrar","meta","setMeta","name","description","status","response","setResponse","formSave","type","message","onChangeInput","e","target","value","sendMeta","preventDefault","res","fetch","method","body","JSON","stringify","headers","responseEnv","json","error"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Jumbotron, Container,Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\n\r\n\r\nfunction cadastrar() {\r\n\r\n  const [meta, setMeta] = useState({\r\n    name: '',\r\n    description: '',\r\n    status: ''\r\n  });\r\n\r\n  const [response, setResponse] = useState({\r\n    formSave: false,\r\n    type: '',\r\n    message: ''\r\n  })\r\n\r\n  const onChangeInput = e => setMeta({ ...meta, [e.target.name]: e.target.value });\r\n\r\n  const sendMeta = async (e) => {\r\n    e.preventDefault();\r\n    setResponse({ formSave: true });\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:8080/metas', {\r\n        method: 'POST',\r\n        body: JSON.stringify(meta),\r\n        headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      const responseEnv = await res.json();\r\n      if (responseEnv.error) {\r\n        setResponse({\r\n          formSave: false,\r\n          type: 'error',\r\n          message: responseEnv.message\r\n        });\r\n      } else {\r\n        setResponse({\r\n          formSave: false,\r\n          type: 'success',\r\n          message: responseEnv.message\r\n        });\r\n      }\r\n    } catch (error) {\r\n      setResponse({\r\n        formSave: false,\r\n        type: 'error',\r\n        message: 'Erro: meta n√£o cadastrada com sucesso'\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"form\">\r\n        <style>\r\n          {`.form{\r\n              background-color: #171941;\r\n              color: #bf38ac;\r\n              padding-top: 30px;\r\n              padding-bottom: 150px;\r\n              margin-bottom: 0rem !important;\r\n          }`}\r\n        </style>\r\n        <Container>\r\n          <h1 className=\"display-4 text-center\">Cadastrar minha meta.</h1>\r\n          <hr />\r\n          {\r\n            response.type === 'error' ? <p> {response.message}</p> : \"\"\r\n          }\r\n          {response.type === 'success' ? <p> {response.message}</p> : \"\"}\r\n\r\n          <form onSubmit={sendMeta}>\r\n            <label>Nome</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              id=\"name\"\r\n              placeholder=\"Nome da meta\"\r\n              onChange={onChangeInput}\r\n            /> <br /> <br />\r\n\r\n            <label>Descri√ß√£o</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"description\"\r\n              id=\"description\"\r\n              placeholder=\"Descri√ß√£o da meta\"\r\n              onChange={onChangeInput}\r\n            /><br /> <br />\r\n\r\n            <label>Status</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"status\"\r\n              id=\"status\"\r\n              placeholder=\"Status da meta\"\r\n              onChange={onChangeInput}\r\n            /><br /> <br />\r\n\r\n            {response.formSave ? <button type=\"submit\" disabled>Enviando ... </button> : <button type=\"submit\">Cadastrar</button>}\r\n          </form>\r\n        </Container>\r\n      </Jumbotron>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default cadastrar"]},"metadata":{},"sourceType":"module"}