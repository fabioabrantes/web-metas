{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\cursos\\\\ImersaoCelke\\\\web\\\\pages\\\\cadastrar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\n\nfunction cadastrar() {\n  const {\n    0: meta,\n    1: setMeta\n  } = useState({\n    name: '',\n    description: '',\n    status: ''\n  });\n\n  const onChangeInput = e => setMeta(_objectSpread(_objectSpread({}, meta), {}, {\n    [e.target.name]: e.target.value\n  }));\n\n  const sendMeta = async e => {\n    e.preventDefault();\n    console.log(meta);\n\n    try {\n      const res = await fetch('http://localhost:8080/metas', {\n        method: 'POST',\n        body: JSON.stringify(meta),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('passou aqui');\n      const responseEnv = await response.json();\n\n      if (responseEnv.error) {\n        console.log(responseEnv.message);\n      } else {\n        console.log(responseEnv.message);\n      }\n    } catch (error) {\n      console.log('Erro: meta não cadastrada com sucesso', error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cadastrar minha meta.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMeta,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Nome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Nome da meta\",\n        onChange: onChangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Descri\\xE7\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"description\",\n        placeholder: \"Descri\\xE7\\xE3o da meta\",\n        onChange: onChangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"status\",\n        placeholder: \"Status da meta\",\n        onChange: onChangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Cadastrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport default cadastrar;","map":{"version":3,"sources":["D:/cursos/ImersaoCelke/web/pages/cadastrar.js"],"names":["React","useState","cadastrar","meta","setMeta","name","description","status","onChangeInput","e","target","value","sendMeta","preventDefault","console","log","res","fetch","method","body","JSON","stringify","headers","responseEnv","response","json","error","message"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,SAAT,GAAqB;AAEnB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBH,QAAQ,CAAC;AAC/BI,IAAAA,IAAI,EAAE,EADyB;AAE/BC,IAAAA,WAAW,EAAE,EAFkB;AAG/BC,IAAAA,MAAM,EAAE;AAHuB,GAAD,CAAhC;;AAMA,QAAMC,aAAa,GAAGC,CAAC,IAAIL,OAAO,iCAAMD,IAAN;AAAY,KAACM,CAAC,CAACC,MAAF,CAASL,IAAV,GAAiBI,CAAC,CAACC,MAAF,CAASC;AAAtC,KAAlC;;AAEA,QAAMC,QAAQ,GAAG,MAAMH,CAAN,IAAW;AAC1BA,IAAAA,CAAC,CAACI,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;;AACA,QAAI;AACF,YAAMa,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgC;AACrDC,QAAAA,MAAM,EAAC,MAD8C;AAErDC,QAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAelB,IAAf,CAFgD;AAGrDmB,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAH4C,OAAhC,CAAvB;AAKAR,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,YAAMQ,WAAW,GAAG,MAAMC,QAAQ,CAACC,IAAT,EAA1B;;AACA,UAAGF,WAAW,CAACG,KAAf,EAAqB;AACnBZ,QAAAA,OAAO,CAACC,GAAR,CAAYQ,WAAW,CAACI,OAAxB;AACD,OAFD,MAEK;AACHb,QAAAA,OAAO,CAACC,GAAR,CAAYQ,WAAW,CAACI,OAAxB;AACD;AACF,KAbD,CAaE,OAAOD,KAAP,EAAc;AACdZ,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDW,KAArD;AACD;AAEF,GApBD;;AAsBA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE;AAAM,MAAA,QAAQ,EAAEd,QAAhB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,WAAW,EAAC,cAHd;AAIE,QAAA,QAAQ,EAAEJ;AAJZ;AAAA;AAAA;AAAA;AAAA,cAFF,oBAOK;AAAA;AAAA;AAAA;AAAA,cAPL,oBAOY;AAAA;AAAA;AAAA;AAAA,cAPZ,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAUE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,aAFP;AAGE,QAAA,WAAW,EAAC,yBAHd;AAIE,QAAA,QAAQ,EAAEA;AAJZ;AAAA;AAAA;AAAA;AAAA,cAVF,eAeI;AAAA;AAAA;AAAA;AAAA,cAfJ,oBAeW;AAAA;AAAA;AAAA;AAAA,cAfX,eAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF,eAkBE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,WAAW,EAAC,gBAHd;AAIE,QAAA,QAAQ,EAAEA;AAJZ;AAAA;AAAA;AAAA;AAAA,cAlBF,eAuBI;AAAA;AAAA;AAAA;AAAA,cAvBJ,oBAuBW;AAAA;AAAA;AAAA;AAAA,cAvBX,eAyBE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAkCD;;AAGD,eAAeN,SAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction cadastrar() {\r\n\r\n  const [meta, setMeta] = useState({\r\n    name: '',\r\n    description: '',\r\n    status: ''\r\n  });\r\n\r\n  const onChangeInput = e => setMeta({ ...meta, [e.target.name]: e.target.value });\r\n\r\n  const sendMeta = async e => {\r\n    e.preventDefault();\r\n    console.log(meta);\r\n    try {\r\n      const res = await fetch('http://localhost:8080/metas', {\r\n        method:'POST',\r\n        body:JSON.stringify(meta),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n      console.log('passou aqui');\r\n      const responseEnv = await response.json();\r\n      if(responseEnv.error){\r\n        console.log(responseEnv.message);\r\n      }else{\r\n        console.log(responseEnv.message);\r\n      }\r\n    } catch (error) {\r\n      console.log('Erro: meta não cadastrada com sucesso', error)\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Cadastrar minha meta.</h1>\r\n      <hr />\r\n\r\n      <form onSubmit={sendMeta}>\r\n        <label>Nome</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Nome da meta\"\r\n          onChange={onChangeInput}\r\n        /> <br /> <br />\r\n\r\n        <label>Descrição</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"description\"\r\n          placeholder=\"Descrição da meta\"\r\n          onChange={onChangeInput}\r\n        /><br /> <br />\r\n\r\n        <label>Status</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"status\"\r\n          placeholder=\"Status da meta\"\r\n          onChange={onChangeInput}\r\n        /><br /> <br />\r\n\r\n        <button type=\"submit\">Cadastrar</button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default cadastrar"]},"metadata":{},"sourceType":"module"}