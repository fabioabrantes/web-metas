{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\cursos\\\\ImersaoCelke\\\\web\\\\pages\\\\cadastrar.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { Jumbotron, Container, Button, Form, FormGroup, Label, Input, Alert } from 'reactstrap';\n\nfunction cadastrar() {\n  _s();\n\n  var _useState = useState({\n    name: '',\n    description: '',\n    status: ''\n  }),\n      meta = _useState[0],\n      setMeta = _useState[1];\n\n  var _useState2 = useState({\n    formSave: false,\n    type: '',\n    message: ''\n  }),\n      response = _useState2[0],\n      setResponse = _useState2[1];\n\n  var onChangeInput = function onChangeInput(e) {\n    return setMeta(_objectSpread(_objectSpread({}, meta), {}, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var sendMeta = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var res, responseEnv;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              setResponse({\n                formSave: true\n              });\n              _context.prev = 2;\n              _context.next = 5;\n              return fetch('http://localhost:8080/metas', {\n                method: 'POST',\n                body: JSON.stringify(meta),\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 5:\n              res = _context.sent;\n              _context.next = 8;\n              return res.json();\n\n            case 8:\n              responseEnv = _context.sent;\n\n              if (responseEnv.error) {\n                setResponse({\n                  formSave: false,\n                  type: 'error',\n                  message: responseEnv.message\n                });\n              } else {\n                setResponse({\n                  formSave: false,\n                  type: 'success',\n                  message: responseEnv.message\n                });\n              }\n\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](2);\n              setResponse({\n                formSave: false,\n                type: 'error',\n                message: 'Erro: meta nÃ£o cadastrada com sucesso'\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 12]]);\n    }));\n\n    return function sendMeta(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"style\", {\n        children: \".form{\\n              background-color: #171941;\\n              color: #bf38ac;\\n              padding-top: 30px;\\n              padding-bottom: 150px;\\n              margin-bottom: 0rem !important;\\n          }\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"display-4 text-center\",\n          children: \"Cadastrar minha meta.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(Alert, {\n          children: [\" \", response.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 41\n        }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(Alert, {\n          color: \"\",\n          children: [\" \", response.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 42\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: sendMeta,\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              \"for\": \"name\",\n              children: \"Nome\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"name\",\n              id: \"name\",\n              placeholder: \"Nome da meta\",\n              onChange: onChangeInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              \"for\": \"description\",\n              children: \"Descri\\xE7\\xE3o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"textarea\",\n              name: \"description\",\n              id: \"description\",\n              placeholder: \"Descri\\xE7\\xE3o da meta\",\n              onChange: onChangeInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              \"for\": \"status\",\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"status\",\n              id: \"status\",\n              placeholder: \"Status da meta\",\n              onChange: onChangeInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), response.formSave ? /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            color: \"danger\",\n            disabled: true,\n            children: \"Enviando ... \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 34\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            outline: true,\n            color: \"primary\",\n            children: \"Cadastrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 105\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(cadastrar, \"dFkaGIWIg49yOg7xdYiX2tdW6B8=\");\n\nexport default cadastrar;","map":{"version":3,"sources":["D:/cursos/ImersaoCelke/web/pages/cadastrar.js"],"names":["React","useState","Jumbotron","Container","Button","Form","FormGroup","Label","Input","Alert","cadastrar","name","description","status","meta","setMeta","formSave","type","message","response","setResponse","onChangeInput","e","target","value","sendMeta","preventDefault","fetch","method","body","JSON","stringify","headers","res","json","responseEnv","error"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Jumbotron, Container, Button, Form, FormGroup, Label, Input,Alert } from 'reactstrap';\r\n\r\n\r\nfunction cadastrar() {\r\n\r\n  const [meta, setMeta] = useState({\r\n    name: '',\r\n    description: '',\r\n    status: ''\r\n  });\r\n\r\n  const [response, setResponse] = useState({\r\n    formSave: false,\r\n    type: '',\r\n    message: ''\r\n  })\r\n\r\n  const onChangeInput = e => setMeta({ ...meta, [e.target.name]: e.target.value });\r\n\r\n  const sendMeta = async (e) => {\r\n    e.preventDefault();\r\n    setResponse({ formSave: true });\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:8080/metas', {\r\n        method: 'POST',\r\n        body: JSON.stringify(meta),\r\n        headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      const responseEnv = await res.json();\r\n      if (responseEnv.error) {\r\n        setResponse({\r\n          formSave: false,\r\n          type: 'error',\r\n          message: responseEnv.message\r\n        });\r\n      } else {\r\n        setResponse({\r\n          formSave: false,\r\n          type: 'success',\r\n          message: responseEnv.message\r\n        });\r\n      }\r\n    } catch (error) {\r\n      setResponse({\r\n        formSave: false,\r\n        type: 'error',\r\n        message: 'Erro: meta nÃ£o cadastrada com sucesso'\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"form\">\r\n        <style>\r\n          {`.form{\r\n              background-color: #171941;\r\n              color: #bf38ac;\r\n              padding-top: 30px;\r\n              padding-bottom: 150px;\r\n              margin-bottom: 0rem !important;\r\n          }`}\r\n        </style>\r\n        <Container>\r\n          <h1 className=\"display-4 text-center\">Cadastrar minha meta.</h1>\r\n          <hr />\r\n          {\r\n            response.type === 'error' ? <Alert> {response.message}</Alert> : \"\"\r\n          }\r\n          {response.type === 'success' ? <Alert color=\r\n          \"\"> {response.message}</Alert> : \"\"}\r\n\r\n          <Form onSubmit={sendMeta}>\r\n            <FormGroup>\r\n              <Label for=\"name\">Nome</Label>\r\n              <Input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Nome da meta\" onChange={onChangeInput} />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <Label for=\"description\">DescriÃ§Ã£o</Label>\r\n              <Input type=\"textarea\" name=\"description\" id=\"description\" placeholder=\"DescriÃ§Ã£o da meta\" onChange={onChangeInput} />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <Label for=\"status\">Status</Label>\r\n              <Input type=\"text\" name=\"status\" id=\"status\" placeholder=\"Status da meta\" onChange={onChangeInput} />\r\n            </FormGroup>\r\n\r\n            {response.formSave ? <Button type=\"submit\" color=\"danger\" disabled>Enviando ... </Button> : <Button type=\"submit\" outline color=\"primary\">Cadastrar</Button>}\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default cadastrar"]},"metadata":{},"sourceType":"module"}